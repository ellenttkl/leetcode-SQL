Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 

Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

The query result format is in the following example:

Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+

Result table:
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+

SOLUTION:

select t.product_id,max(case when t.product_id = p.product_id and t.change_date=p.change_date then p.new_price
					                   when t.change_date is null then 10
                        end) as price
from
(select p1.product_id, max(p2.change_date) as change_date
from Products as p1 left join Products as p2
on p1.product_id = p2.product_id and p2.change_date<='2019-08-16'
group by p1.product_id) as t 
left join Products as p
on t.product_id = p.product_id
group by t.product_id
;
